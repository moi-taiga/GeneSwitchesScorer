[{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"this-workflow","dir":"Articles","previous_headings":"","what":"This workflow","title":"GSS_Workflow","text":"workflow take using GSS “patient data” identify progression towards Tcell exhaustion.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"necessary-packages-for-this-example-workflow","dir":"Articles","previous_headings":"This workflow","what":"Necessary Packages for this Example Workflow:","title":"GSS_Workflow","text":"","code":"#CRAN library(Seurat) library(RColorBrewer) library(ggplot2) # library(SeuratObject) # library(sp) # library(data.table) # library(reticulate) # library(patchwork) # library(parallel) # library(Matrix)  #BiocMnager library(DelayedMatrixStats) library(slingshot) library(SingleCellExperiment) library(glmGamPoi)  #Other library(GeneSwitches) library(GeneSwitchesScorer)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"input-datasets","dir":"Articles","previous_headings":"","what":"Input Datasets","title":"GSS_Workflow","text":"workflow uses data “Single-Cell Tumor Immune Atlas Precision Oncology”TODO REF:https://zenodo.org/record/5205544 also uses ### sample/patient data. seurat objects. Download links load environment using:","code":"#load in the data atlas.seu <- readRDS(\"~/R Packages/mini_data/mini_TICAtlas.rds\") pre.seu <- readRDS(\"~/R Packages/mini_data/mini_PTCL_PRE.rds\") post.seu <- readRDS(\"~/R Packages/mini_data/mini_PTCL_POST.rds\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"optional-view-the-umaps-of-the-input-data-","dir":"Articles","previous_headings":"Input Datasets","what":"Optional: view the umaps of the input data.","title":"GSS_Workflow","text":"","code":"#View UMAPS of each loaded Seurat object DimPlot(object = pre.seu, reduction = \"umap\", group.by = \"celltype\" ,label = T) +   ggtitle(\"Pre-treatment\") DimPlot(object = post.seu, reduction = \"umap\", group.by = \"celltype\" ,label = T) +   ggtitle(\"POST-treatment\") DimPlot(object = atlas.seu, reduction = \"umap\", group.by = \"lv1_annot\" ,label = T) +   ggtitle(\"Atlas\")"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"this-may-not-be-necessary-looks-to-me-like-the-lowest-values-are-500-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"This may not be necessary, looks to me like the lowest values are ~500.","title":"GSS_Workflow","text":"","code":"post.seu <- subset(post.seu, subset = nFeature_RNA > 200) pre.seu <- subset(pre.seu, subset = nFeature_RNA > 200)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"sctransform-the-atlas-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Sctransform the atlas.","title":"GSS_Workflow","text":"","code":"# While using this data I am having to edit sctransforms source code :/ # Use `fixInNamespace(\"make_cell_attr\", \"sctransform\")` # Change identical to setequal. # do we need to transform here if its being done after splitting? atlas.seu <- SCTransform(atlas.seu, method = \"glmGamPoi\", verbose = FALSE) # I imagine this would also need to be done for the patient data if it has not already pre.seu <- SCTransform(pre.seu, method = \"glmGamPoi\", verbose = FALSE) post.seu <- SCTransform(post.seu, method = \"glmGamPoi\", verbose = FALSE)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"find-transfer-anchors-for-the-patient-data","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Find transfer anchors for the patient data","title":"GSS_Workflow","text":"","code":"# Post post_anchors <- FindTransferAnchors(   reference = atlas.seu,   query = post.seu,   normalization.method = \"SCT\",   reference.reduction = \"pca\",   dims = 1:20 )  # Pre pre_anchors <- FindTransferAnchors(   reference = atlas.seu,   query = pre.seu,   normalization.method = \"SCT\",   reference.reduction = \"pca\",   dims = 1:20 )"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"map-query","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Map Query","title":"GSS_Workflow","text":"","code":"post.seu <- MapQuery(   anchorset = post_anchors,   query = post.seu,   reference = atlas.seu,   refdata = list(     cell_type = \"lv1_annot\"   ),   reference.reduction = \"pca\" )  pre.seu <- MapQuery(   anchorset = pre_anchors,   query = pre.seu,   reference = atlas.seu,,   refdata = list(     cell_type = \"lv1_annot\"   ),   reference.reduction = \"pca\" )"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"remove-cells-from-the-patient-data-which-dont-have-a-confident-cell_type-prediction-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Remove cells from the patient data which dont have a confident cell_type prediction.","title":"GSS_Workflow","text":"","code":"pre.seu <- subset(pre.seu, subset = predicted.cell_type.score > 0.65) post.seu <- subset(post.seu, subset = predicted.cell_type.score > 0.65)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"process-the-patient-data-using-seurat","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Process the patient data using Seurat","title":"GSS_Workflow","text":"","code":"#pre #pre.seu <- NormalizeData(pre.seu) #pre.seu <- FindVariableFeatures(pre.seu) #pre.seu <- ScaleData(pre.seu) pre.seu <- RunPCA(pre.seu) pre.seu <- FindNeighbors(pre.seu) pre.seu <- FindClusters(pre.seu) pre.seu <- RunUMAP(pre.seu, dims = 1:30, n_neighbors = 20, min_dist = 0.3) #post #post.seu <- NormalizeData(post.seu) #post.seu <- FindVariableFeatures(post.seu) #post.seu <- ScaleData(post.seu) post.seu <- RunPCA(post.seu) post.seu <- FindNeighbors(post.seu) post.seu <- FindClusters(post.seu) post.seu <- RunUMAP(post.seu, dims = 1:30, n_neighbors = 20, min_dist = 0.3)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"optional-view-the-umaps-of-the-processed-data-","dir":"Articles","previous_headings":"Begin label transfer and integration. > Process the patient data using Seurat","what":"Optional: view the umaps of the processed data.","title":"GSS_Workflow","text":"","code":"#View UMAPS of each loaded Seurat object DimPlot(object = pre.seu, reduction = \"umap\", group.by = \"predicted.cell_type\" ,label = T) +   ggtitle(\"Pre-treatment\") DimPlot(object = post.seu, reduction = \"umap\", group.by = \"predicted.cell_type\" ,label = T) +   ggtitle(\"POST-treatment\") DimPlot(object = atlas.seu, reduction = \"umap\", group.by = \"lv1_annot\" ,label = T) +   ggtitle(\"Atlas\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"subset-the-atlas-data-to-only-include-celltypes-involved-in-the-tcell-exhaustion-trajectory-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Subset the atlas data to only include celltypes involved in the Tcell exhaustion trajectory.","title":"GSS_Workflow","text":"","code":"# Subsetting the Atlas data into 3 types of Tcells for the exhaustion trajectory. #atlas_subset_exhaustion.seu atlas.seu <- subset(x = atlas.seu, subset = lv1_annot %in% c(\"T cells naive\",                                                                                 \"CD8 cytotoxic\",                                                                                 \"CD8 terminally exhausted\"))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"split-and-re-integrate-the-atlas-object","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Split and re-integrate the atlas object","title":"GSS_Workflow","text":"","code":"## Split the atlast object by source. atlas_sources <- SplitObject(atlas.seu, split.by = \"source\")  ## Make an empty list to store the filtered seurat objects filtered_atlas_sources <- list()  ## Loop through the `atlas_sources` and add objects which have more than 100 cells to the new list.  for (i in 1:length(atlas_sources)) {   # Check the number of cells in the Seurat object   num_cells <- dim(atlas_sources[[i]]@assays$RNA@counts)[2]    # If the number of cells is less than 100, skip this Seurat object   if (num_cells < 100) {     next   }   # Otherwise, add the Seurat object to the filtered list   filtered_atlas_sources[[length(filtered_atlas_sources)+1]] <- atlas_sources[[i]] }  ## Some Seurat processing on the objects in the new filtered list for (i in 1:length(filtered_atlas_sources)) {   #Should this not also be SCTransform?   filtered_atlas_sources[[i]] <- NormalizeData(filtered_atlas_sources[[i]], normalization.method = \"LogNormalize\",                                             scale.factor = 10000, verbose = FALSE)   filtered_atlas_sources[[i]] <- FindVariableFeatures(filtered_atlas_sources[[i]], selection.method = \"vst\",                                                     nfeatures = 1500, verbose = FALSE) }"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"intregrate-all-genes-common-between-snrna-and-scrna-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Intregrate all genes common between snRNA and scRNA.","title":"GSS_Workflow","text":"","code":"seuAnch <- FindIntegrationAnchors(filtered_atlas_sources, anchor.features = 1500,                                   normalization.method = \"LogNormalize\",                                   reduction = \"cca\", dims = 1:30,                                  k.anchor = 5, k.filter = 200,                                  k.score = 30, max.features = 200)  atlas.seu <- IntegrateData(anchorset = seuAnch, dims = 1:30,                     normalization.method = \"LogNormalize\")  DefaultAssay(atlas.seu) = \"integrated\" #Should this be another SCTRANSFORM? no ScaleData or  FindVariableFeatures atlas.seu <- ScaleData(atlas.seu, verbose = FALSE) atlas.seu <- FindVariableFeatures(atlas.seu) atlas.seu <- RunPCA(atlas.seu, npcs = 30, verbose = FALSE) atlas.seu <- RunUMAP(atlas.seu, reduction = \"pca\", dims = 1:30) atlas.seu <- FindNeighbors(atlas.seu, reduction = \"pca\", dims = 1:30) atlas.seu <- FindClusters(atlas.seu, resolution = 0.5)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"plot","dir":"Articles","previous_headings":"Begin label transfer and integration. > Intregrate all genes common between snRNA and scRNA.","what":"Plot","title":"GSS_Workflow","text":"","code":"p1 <- DimPlot(atlas.seu, reduction = \"umap\", group.by = \"lv1_annot\") p2 <- DimPlot(atlas.seu, reduction = \"umap\", label = TRUE, repel = TRUE) p3 <- DimPlot(atlas.seu, reduction = \"umap\", group.by = \"source\") p1 + p2 +p3"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"convert-the-atlas-seurat-object-to-a-singlecellexperiment-object-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Convert the atlas seurat object to a SingleCellExperiment object.","title":"GSS_Workflow","text":"","code":"atlas.sce <- as.SingleCellExperiment(atlas.seu)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"run-slingshot-on-the-atlas-singlecellexperiment-object-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Run Slingshot on the atlas SingleCellExperiment object.","title":"GSS_Workflow","text":"","code":"# Run Slingshot atlas.sce <- slingshot(atlas.sce, clusterLabels = \"lv1_annot\", reducedDim = 'UMAP') # Plot the Trajectory colors <- colorRampPalette(brewer.pal(11,'Spectral')[-6])(100) plotcol <- colors[cut(atlas.sce$slingPseudotime_1, breaks=100)] plot(reducedDims(atlas.sce)$UMAP, col = plotcol, pch=16, asp = 1) #lines(SlingshotDataSet(atlas.sce), lwd=2, col='black')"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"convert-the-atlas-singlecellexperiment-object-to-a-geneswitches-object-","dir":"Articles","previous_headings":"Begin label transfer and integration.","what":"Convert the atlas SingleCellExperiment object to a GeneSwitches Object.","title":"GSS_Workflow","text":"","code":"counts <- exp(logcounts(atlas.sce)) - 1 assay(atlas.sce, \"counts\") <- counts  atlas.gs <- SingleCellExperiment(assays = List(expdata = logcounts(atlas.sce))) colData(atlas.gs)$Pseudotime <- -atlas.sce$slingPseudotime_1 reducedDims(atlas.gs) <- SimpleList(UMAP = reducedDim(atlas.sce, \"UMAP\", withDimnames=TRUE))"},{"path":[]},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"subset-the-objects-to-only-include-celltypes-involved-in-the-trajectory-of-interest-","dir":"Articles","previous_headings":"Below follows the old method.","what":"Subset the objects to only include celltypes involved in the trajectory of interest.","title":"GSS_Workflow","text":"","code":"# subsetting the pre treatment patient data to only include the exhaustion trajectory. pre_subset_Tcell.seu <- subset(x = pre.seu, subset = celltype %in% c(\"Early_Tcells/CD3+CD4+TIGIT+GATA3+\",                                                           \"CD3+CD4-CD8-TIGIT+_Tcell3\",                                                           \"CD3+CD4-CD8+TIGIT+_Tcell2\",                                                           \"CD3+CD4-CD8+TIGIT+_Tcells\",                                                           \"Cytotoxic_CD8Tcell\",                                                           \"CD3+TIGIT+Tcell\",                                                           \"Tcell1\"))  # subsetting the post treatment patient data to only include the exhaustion trajectory. post_subset_Tcell.seu <- subset(x = post.seu, subset = celltype %in% c(\"CD3+PDCD1+TIGIT+Activated\",                                                             \"Tcell2_CD3+GATA3+TIGIT+\",                                                             \"Tcell_CD3+GATA3+TIGIT+\",                                                             \"Cytotoxic_CD8Tcell\",                                                             \"Tcell_CD3+TIGIT+\",                                                             \"Activated_Tcell\",                                                             \"Tcell2\"))  # Subsetting the Atlas data into 3 types of Tcells for the exhaustion trajectory. atlas_subset_exhaustion.seu <- subset(x = atlas.seu, subset = lv1_annot %in% c(\"T cells naive\",                                                                         \"CD8 cytotoxic\",                                                                          \"CD8 terminally exhausted\"))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"optional-view-the-umaps-of-the-subsetted-data-","dir":"Articles","previous_headings":"Below follows the old method. > Subset the objects to only include celltypes involved in the trajectory of interest.","what":"Optional: view the umaps of the subsetted data.","title":"GSS_Workflow","text":"","code":"DimPlot(object = pre_subset_Tcell.seu, reduction = \"umap\", group.by = \"celltype\" ,label = T) +   ggtitle(\"Subsetted Pre-treatment\") DimPlot(object = post_subset_Tcell.seu, reduction = \"umap\", group.by = \"celltype\" ,label = T) +   ggtitle(\"Subsetted Post-treatment\") DimPlot(object = atlas_subset_exhaustion.seu, reduction = \"umap\", group.by = \"lv1_annot\" ,label = T) +   ggtitle(\"Subsetted Atlas\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"process-the-atlas-data-using-seurat-","dir":"Articles","previous_headings":"Below follows the old method.","what":"Process the atlas data using Seurat.","title":"GSS_Workflow","text":"","code":"# Scale Data # this will be replaced by SCTRANSFORM # Has been replaced by SCTransform() atlas_subset_exhaustion.seu <- ScaleData(atlas_subset_exhaustion.seu) # Run PCA atlas_subset_exhaustion.seu <- RunPCA(atlas_subset_exhaustion.seu) # Run UMAP atlas_subset_exhaustion.seu <- RunUMAP(atlas_subset_exhaustion.seu, dims = 1:30) # FindNeighbors atlas_subset_exhaustion.seu <- FindNeighbors(atlas_subset_exhaustion.seu, reduction = \"pca\", dims = 1:30) # FindClusters atlas_subset_exhaustion.seu <- FindClusters(atlas_subset_exhaustion.seu, resolution = 0.5)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"optional-view-the-umaps-of-the-processed-atlas-data-","dir":"Articles","previous_headings":"Below follows the old method. > Process the atlas data using Seurat.","what":"Optional: view the umaps of the processed atlas data.","title":"GSS_Workflow","text":"","code":"DimPlot(object = atlas_subset_exhaustion.seu, reduction = \"umap\", group.by = \"lv1_annot\" ,label = T) +   ggtitle(\"Subsetted and processed Atlas\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"convert-the-seurat-objects-to-singlecellexperiment-objects-","dir":"Articles","previous_headings":"Below follows the old method.","what":"Convert the Seurat objects to SingleCellExperiment objects.","title":"GSS_Workflow","text":"","code":"# converting the pre-treatment patient data to SCE. pre.sce <- as.SingleCellExperiment(pre.seu)  # converting the pre-treatment patient data to SCE. post.sce <- as.SingleCellExperiment(post.seu)  # converting the atlas data to SCE. atlas.sce <- as.SingleCellExperiment(atlas_subset_exhaustion.seu)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"use-slingshot-to-produce-an-exhaustion-trajectory-for-the-tcells-","dir":"Articles","previous_headings":"Below follows the old method.","what":"Use slingshot to produce an exhaustion Trajectory for the Tcells.","title":"GSS_Workflow","text":"","code":"#Run slingshot on the Atlas data. atlas_sling.sce  <- slingshot(atlas.sce,                                     clusterLabels = \"lv1_annot\",                                     start.clus  = \"T cells naive\",                                     end.clus = \"CD8 terminally exhausted\",                                     reducedDim = \"UMAP\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"check","dir":"Articles","previous_headings":"Below follows the old method. > Use slingshot to produce an exhaustion Trajectory for the Tcells.","what":"Check:","title":"GSS_Workflow","text":"sure Want keep .","code":"summary(atlas_sling.sce$slingPseudotime_1)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"plot-the-trajectory","dir":"Articles","previous_headings":"Below follows the old method. > Use slingshot to produce an exhaustion Trajectory for the Tcells.","what":"Plot the trajectory","title":"GSS_Workflow","text":"","code":"#Plot the slingshot trajectory. colors <- colorRampPalette(brewer.pal(11,'Spectral')[-6])(100) plotcol <- colors[cut(atlas_sling.sce$slingPseudotime_1, breaks=100)] plot(reducedDims(atlas_sling.sce)$UMAP, col = plotcol, pch=16, asp = 1) lines(SlingshotDataSet(atlas_sling.sce), lwd=2, col='black')"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"convert-the-singlecellexperiment-objects-to-geneswitches-objects-","dir":"Articles","previous_headings":"Below follows the old method.","what":"Convert the SingleCellExperiment objects to GeneSwitches Objects.","title":"GSS_Workflow","text":"","code":"# convert the pre treatment patient data to a GS obj.  pre.gs <- SingleCellExperiment(assays = List(expdata = logcounts(pre.sce))) # convert the post treatment patient data to a GS obj.  post.gs <- SingleCellExperiment(assays = List(expdata = logcounts(post.sce))) # convert the atlas data to a GS obj. atlas.gs <- SingleCellExperiment(assays = List(expdata = logcounts(atlas_sling.sce))) colData(atlas.gs)$Pseudotime <- -atlas_sling.sce$slingPseudotime_1 reducedDims(atlas.gs) <- SimpleList(UMAP = reducedDim(atlas_sling.sce, \"UMAP\", withDimnames=TRUE))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"binarize","dir":"Articles","previous_headings":"Below follows the old method.","what":"Binarize","title":"GSS_Workflow","text":"checking 0.2 cutoff appropriate found negative expression…{r, eval = FALSE} hist(.numeric(assays(gs_atlas)$expdata))","code":"bn_cutoff <- 0.7 # binarize pre treatment patient data pre.gs<- binarize_exp(pre.gs, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff) # binarize post treatment patient data post.gs<- binarize_exp(post.gs, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff) # binarize atlas data atlas_binerized.gs <- binarize_exp(atlas.gs, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"fit-logistic-regression-and-find-the-switching-pseudo-time-point-for-each-gene","dir":"Articles","previous_headings":"Below follows the old method.","what":"fit logistic regression and find the switching pseudo-time point for each gene","title":"GSS_Workflow","text":"","code":"atlas_glm.gs <- find_switch_logistic_fastglm(atlas_binerized.gs, downsample = FALSE, show_warning = FALSE) dim(atlas_glm.gs)"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"currently-using-a-cutoff-of-0-005-which-gives-148-genes-","dir":"Articles","previous_headings":"Below follows the old method. > Filter Switching Genes","what":"currently using a cutoff of 0.005 which gives 148 genes.","title":"GSS_Workflow","text":"","code":"atlas_filtered.gs <- filter_switchgenes(atlas_glm.gs, allgenes = TRUE,r2cutoff = 0.0000001) atlas_filtered.gs <- filter_switchgenes(atlas_glm.gs, allgenes = TRUE, topnum = 100) dim(atlas_filtered.gs)"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"seems-a-bit-odd-maybe-it-is-to-do-with-using-logged-expression-data","dir":"Articles","previous_headings":"Below follows the old method. > Filter Switching Genes","what":"Seems a bit odd, maybe it is to do with using logged expression data","title":"GSS_Workflow","text":"","code":"plot_timeline_ggplot(atlas_filtered.gs, timedata = colData(atlas.gs)$Pseudotime, txtsize = 3)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"select-evenly-distributed-switching-genes","dir":"Articles","previous_headings":"Below follows the old method.","what":"Select evenly distributed switching genes","title":"GSS_Workflow","text":"remember define minimum time spacing","code":"gs_scorer_genes <- select_evenly_distributed_switching_genes(gs_atlas_r2005, min_time_spacing = 5)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/GSS_Workflow.html","id":"reduce-the-binary-counts-matricies-of-the-query-data-to-only-include-the-selection-of-evenly-distributed-genes-from-the-refernence-","dir":"Articles","previous_headings":"Below follows the old method.","what":"Reduce the binary counts matricies of the query data to only include the selection of evenly distributed genes from the refernence.","title":"GSS_Workflow","text":"","code":"fibroblast.gs   <- filter_gene_expression_for_switching_genes(fibroblast.gs,gs_scorer_genes = gss_genes) mixed.gs        <- filter_gene_expression_for_switching_genes(mixed.gs,gs_scorer_genes = gss_genes) early_primed.gs <- filter_gene_expression_for_switching_genes(early_primed.gs,gs_scorer_genes = gss_genes) primed_reduced.gs       <- filter_gene_expression_for_switching_genes(primed.gs,gs_scorer_genes = gss_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"load-neccecary-packages","dir":"Articles","previous_headings":"","what":"Load neccecary packages","title":"reprogramming_example","text":"","code":"library(Seurat) library(ggplot2) library(slingshot) library(RColorBrewer) library(GeneSwitches) library(GeneSwitchesScorer) library(SingleCellExperiment)"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"here-we-use-this-reprogramming-dataset-as-the-reference","dir":"Articles","previous_headings":"Data","what":"Here we use this Reprogramming dataset as the reference","title":"reprogramming_example","text":"","code":"big_reference.seu <- readRDS(\"~/R Packages/mini_data/readySeu_hrpi.rds\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"downsample-if-neccecary","dir":"Articles","previous_headings":"Data > Here we use this Reprogramming dataset as the reference","what":"Downsample if neccecary","title":"reprogramming_example","text":"#View reference","code":"reference.seu <- subset(x = big_reference.seu, downsample = 100) DimPlot(object = reference.seu, reduction = \"umap\", group.by = \"identity\" ,label = T) +   ggtitle(\"Reference\")"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"in-this-case-fibroblast-to-primed-","dir":"Articles","previous_headings":"","what":"in this case fibroblast to primed.","title":"reprogramming_example","text":"#View reduced reference","code":"reference.seu <- subset(x = reference.seu, subset = identity %in% grep(\"^n\", reference.seu@meta.data$identity, value = TRUE), invert = TRUE) DimPlot(object = reference.seu, reduction = \"umap\", group.by = \"identity\" ,label = T) +   ggtitle(\"Reference\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"we-use-subsets-of-the-reprogramming-dataset-as-queries-","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"We use subsets of the Reprogramming dataset as queries.","title":"reprogramming_example","text":"","code":"fibroblast.seu <- subset(x = reference.seu, subset = identity %in% \"fibroblast\") mixed.seu <- subset(x = reference.seu, subset = identity %in% \"mixed\") early_primed.seu <- subset(x = reference.seu, subset = identity %in% \"early-primed\") primed.seu <- subset(x = reference.seu, subset = identity %in% \"primed\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"convert-objects-to-single-cell-experiment-objects","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"Convert objects to single cell experiment objects","title":"reprogramming_example","text":"","code":"reference.sce    <- as.SingleCellExperiment(reference.seu) fibroblast.sce   <- as.SingleCellExperiment(fibroblast.seu) mixed.sce        <- as.SingleCellExperiment(mixed.seu) early_primed.sce <- as.SingleCellExperiment(early_primed.seu) primed.sce       <- as.SingleCellExperiment(primed.seu)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"run-slingshot-on-the-reference-data-to-produce-a-reprogramming-trajectory-","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"Run slingshot on the reference data to produce a reprogramming trajectory.","title":"reprogramming_example","text":"","code":"reference.sce  <- slingshot(reference.sce,                             clusterLabels = \"identity\",                             start.clus  = \"fibroblast\",                             end.clus = \"primed\",                             reducedDim = \"UMAP\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"plot-the-slingshot-trajectory-","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"Plot the slingshot trajectory.","title":"reprogramming_example","text":"","code":"colors <- colorRampPalette(brewer.pal(11,'Spectral')[-6])(100) plotcol <- colors[cut(reference.sce$slingPseudotime_1, breaks=100)] plot(reducedDims(reference.sce)$UMAP, col = plotcol, pch=16, asp = 1) lines(SlingshotDataSet(reference.sce), lwd=2, col='black')"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"convert-sce-obj-to-gs-obj","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"Convert SCE obj to GS obj","title":"reprogramming_example","text":"","code":"reference.gs    <- SingleCellExperiment(assays = List(expdata = logcounts(reference.sce)))   colData(reference.gs)$Pseudotime <- reference.sce$slingPseudotime_1   reducedDims(reference.gs)        <- SimpleList(UMAP = reducedDim(reference.sce, \"UMAP\", withDimnames=TRUE))  fibroblast.gs   <- SingleCellExperiment(assays = List(expdata = logcounts(fibroblast.sce))) mixed.gs        <- SingleCellExperiment(assays = List(expdata = logcounts(mixed.sce))) early_primed.gs <- SingleCellExperiment(assays = List(expdata = logcounts(early_primed.sce))) primed.gs       <- SingleCellExperiment(assays = List(expdata = logcounts(primed.sce)))"},{"path":[]},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"or-learn-how-to-use-the-other-method-of-binarizing","dir":"Articles","previous_headings":"","what":"reprogramming_example","title":"reprogramming_example","text":"","code":"h <- hist(as.matrix(assays(primed.gs)$expdata),            breaks = 800,            plot = FALSE)  plot(h,       freq = FALSE,     xlim = c(0.3, 0.9),     ylim = c(0, 0.5),       main = \"Histogram of gene expression in Reprogramming Study\",       xlab = \"Gene expression\",       col = \"darkgoldenrod2\",       border = \"grey\") +  abline(v = 0.46, col = \"blue\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"binarize","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"Binarize","title":"reprogramming_example","text":"","code":"reference.gs    <- binarize_exp(reference.gs, fix_cutoff = TRUE, binarize_cutoff = 0.65) fibroblast.gs   <- binarize_exp(fibroblast.gs, fix_cutoff = TRUE, binarize_cutoff = 0.65) mixed.gs        <- binarize_exp(mixed.gs, fix_cutoff = TRUE, binarize_cutoff = 0.75) early_primed.gs <- binarize_exp(early_primed.gs, fix_cutoff = TRUE, binarize_cutoff = 0.49) primed.gs       <- binarize_exp(primed.gs, fix_cutoff = TRUE, binarize_cutoff = 0.4555)"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"with-how-long-binerizing-takes-you-may-want-to-choose-to-save-objects-for-future-use-","dir":"Articles","previous_headings":"in this case fibroblast to primed. > CHECKPOINT","what":"**with how long binerizing takes you may want to choose to save objects for future use.","title":"reprogramming_example","text":"","code":"saveRDS(reference.gs   , \"~/R Packages/mini_data/Binerized/reference.rds\")  saveRDS(fibroblast.gs  , \"~/R Packages/mini_data/Binerized/fibroblast.rds\")  saveRDS(mixed.gs       , \"~/R Packages/mini_data/Binerized/mixed.rds\")  saveRDS(early_primed.gs, \"~/R Packages/mini_data/Binerized/early_primed.rds\")  saveRDS(primed.gs      , \"~/R Packages/mini_data/Binerized/primed.rds\")   reference.gs    <- readRDS(\"~/R Packages/mini_data/Binerized/reference.rds\")  fibroblast.gs   <- readRDS(\"~/R Packages/mini_data/Binerized/fibroblast.rds\")  mixed.gs        <- readRDS(\"~/R Packages/mini_data/Binerized/mixed.rds\")  early_primed.gs <- readRDS(\"~/R Packages/mini_data/Binerized/early_primed.rds\")  primed.gs       <- readRDS(\"~/R Packages/mini_data/Binerized/primed.rds\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"fit-logistic-regression-and-find-the-switching-pseudo-time-point-for-each-gene","dir":"Articles","previous_headings":"in this case fibroblast to primed. > CHECKPOINT","what":"fit logistic regression and find the switching pseudo-time point for each gene","title":"reprogramming_example","text":"","code":"reference_glm.gs <- find_switch_logistic_fastglm(reference.gs, downsample = FALSE, show_warning = FALSE)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"this-is-another-time-consuming-process-may-want-to-choose-to-save-objects-for-future-use-","dir":"Articles","previous_headings":"in this case fibroblast to primed. > CHECKPOINT","what":"This is another time consuming process, may want to choose to save objects for future use.","title":"reprogramming_example","text":"","code":"saveRDS(reference_glm.gs   , \"~/R Packages/mini_data/Binerized/reference_glm.rds\") reference_glm.gs    <- readRDS(\"~/R Packages/mini_data/Binerized/reference_glm.rds\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"filter-to-only-include-switching-genes","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"Filter to only include Switching Genes","title":"reprogramming_example","text":"","code":"reference.gs <- filter_switchgenes(reference_glm.gs, allgenes = TRUE,r2cutoff = 0.03)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"view-all-of-the-switching-genes","dir":"Articles","previous_headings":"in this case fibroblast to primed.","what":"View all of the switching genes","title":"reprogramming_example","text":"","code":"plot_timeline_ggplot(reference.gs, timedata = colData(reference_glm.gs)$Pseudotime, txtsize = 3)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"filter-for-an-even-distribution","dir":"Articles","previous_headings":"","what":"Filter for an even distribution","title":"reprogramming_example","text":"#View selected switching genes","code":"gss_genes <- select_evenly_distributed_switching_genes(reference.gs, min_time_spacing = 5) plot_timeline_ggplot(gss_genes, timedata = colData(reference_glm.gs)$Pseudotime, txtsize = 3)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"reduce-the-binary-counts-matricies-of-the-query-data-to-only-include-the-selection-of-evenly-distributed-genes-from-the-refernence-","dir":"Articles","previous_headings":"Filter for an even distribution","what":"Reduce the binary counts matricies of the query data to only include the selection of evenly distributed genes from the refernence.","title":"reprogramming_example","text":"","code":"fibroblast_reduced      <- filter_gene_expression_for_switching_genes(fibroblast.gs@assays@data@listData$binary   , gss_genes) mixed_reduced           <- filter_gene_expression_for_switching_genes(mixed.gs@assays@data@listData$binary        , gss_genes) early_primed_reduced    <- filter_gene_expression_for_switching_genes(early_primed.gs@assays@data@listData$binary , gss_genes) primed_reduced          <- filter_gene_expression_for_switching_genes(primed.gs@assays@data@listData$binary       , gss_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"produce-an-estimate-for-the-position-on-trajectory-of-each-gene-in-each-cell-of-a-sample-","dir":"Articles","previous_headings":"Filter for an even distribution","what":"Produce an estimate for the position on trajectory of each gene in each cell of a sample.","title":"reprogramming_example","text":"","code":"fibroblast_lines   <- create_racing_lines(fibroblast_reduced  , gss_genes) mixed_lines        <- create_racing_lines(mixed_reduced       , gss_genes) early_primed_lines <- create_racing_lines(early_primed_reduced, gss_genes) primed_lines       <- create_racing_lines(primed_reduced      , gss_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"aggregate-the-above-to-estimate-the-position-of-the-querys-along-the-trajectory-","dir":"Articles","previous_headings":"Filter for an even distribution","what":"aggregate the above to estimate the position of the query’s along the trajectory.","title":"reprogramming_example","text":"##plot something better.","code":"fibroblast_flat   <- flatten_cell_frequencies_moi(fibroblast_lines) mixed_flat        <- flatten_cell_frequencies_moi(mixed_lines) early_primed_flat <- flatten_cell_frequencies_moi(early_primed_lines) primed_flat       <- flatten_cell_frequencies_moi(primed_lines)  plot(colSums(fibroblast_flat)) plot(colSums(mixed_flat)) plot(colSums(early_primed_flat)) plot(colSums(primed_flat)) plot(x = 1:ncol(fibroblast_flat), y = fibroblast_flat[1,], type = \"l\", xlab = \"Pseudotime Index\", ylab = \"Cell Position Likelyhood\", main = \"Trajectory Progress of \\\"fibroblast\\\"\") plot(x = 1:ncol(mixed_flat), y = mixed_flat[1,], type = \"l\", xlab = \"Pseudotime Index\", ylab = \"Cell Position Likelyhood\", main = \"Trajectory Progress of mixed\") plot(x = 1:ncol(early_primed_flat), y = early_primed_flat[1,], type = \"l\", xlab = \"Pseudotime Index\", ylab = \"Cell Position Likelyhood\", main = \"Trajectory Progress of early_primed\") plot(x = 1:ncol(primed_flat), y = primed_flat[1,], type = \"l\", xlab = \"Pseudotime Index\", ylab = \"Cell Position Likelyhood\", main = \"Trajectory Progress of \\\"primed\\\"\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/reprogramming_example.html","id":"is-owens-method-any-different","dir":"Articles","previous_headings":"Filter for an even distribution","what":"is owens method any different?","title":"reprogramming_example","text":"","code":"fibroblast_flat   <- flatten_cell_frequencies_owen(fibroblast_lines) mixed_flat        <- flatten_cell_frequencies_owen(mixed_lines) early_primed_flat <- flatten_cell_frequencies_owen(early_primed_lines) primed_flat       <- flatten_cell_frequencies_owen(primed_lines)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load Libraries","title":"wholeanalysis","text":"","code":"library(data.table) library(Matrix) library(reticulate) library(Seurat) library(ggplot2) library(patchwork) library(RColorBrewer) library(parallel) library(GeneSwitches) library(slingshot)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"loading-in-the-downsampled-atlas-object","dir":"Articles","previous_headings":"Load Libraries","what":"Loading in the downsampled atlas object","title":"wholeanalysis","text":"","code":"seu_ds <- readRDS(\"/scratch/ojlr1u20/TICAtlas_downsampled_1000.rds\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"sctransforming-the-downsampled-atlas-object","dir":"Articles","previous_headings":"","what":"sctransforming the downsampled atlas object","title":"wholeanalysis","text":"","code":"seu_ds <- SCTransform(seu_ds, verbose = FALSE)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"loading-in-the-individual-datasets","dir":"Articles","previous_headings":"","what":"loading in the individual datasets","title":"wholeanalysis","text":"","code":"PTCL_POST <-  readRDS(\"/scratch/ojlr1u20/PTCL_POST.rds\") PTCL_PRE <-  readRDS(\"/scratch/ojlr1u20/PTCL_PRE.rds\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"subsetting-them-to-get-more-cells-in-each-sample","dir":"Articles","previous_headings":"loading in the individual datasets","what":"subsetting them to get more cells in each sample","title":"wholeanalysis","text":"#Label transfer consistency maintained atlas patient sample dataset annotation","code":"PTCL_POST <- subset(PTCL_POST, subset = nFeature_RNA > 200) PTCL_PRE <- subset(PTCL_PRE, subset = nFeature_RNA > 200) post_anchors <- FindTransferAnchors(   reference = seu_ds,   query = PTCL_POST,   normalization.method = \"SCT\",   reference.reduction = \"pca\",   dims = 1:50 )  PTCL_POST <- MapQuery(   anchorset = post_anchors,   query = PTCL_POST,   reference = seu_ds,   refdata = list(     cell_type = \"cell_type\"   ),   reference.reduction = \"pca\" )  pre_anchors <- FindTransferAnchors(   reference = seu_ds,   query = PTCL_PRE,   normalization.method = \"SCT\",   reference.reduction = \"pca\",   dims = 1:50 )  PTCL_PRE <- MapQuery(   anchorset = pre_anchors,   query = PTCL_PRE,   reference = seu_ds,   refdata = list(     cell_type = \"cell_type\"   ),   reference.reduction = \"pca\" )"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"setting-a-threshold","dir":"Articles","previous_headings":"","what":"Setting a threshold","title":"wholeanalysis","text":"","code":"PTCL_POST_ss <- subset(PTCL_POST, subset = predicted.cell_type.score > 0.65) PTCL_PRE_ss <- subset(PTCL_PRE, subset = predicted.cell_type.score > 0.65)  PTCL_POST_ss <- NormalizeData(PTCL_POST_ss) PTCL_POST_ss <- FindVariableFeatures(PTCL_POST_ss) PTCL_POST_ss <- ScaleData(PTCL_POST_ss) PTCL_POST_ss <- RunPCA(PTCL_POST_ss) PTCL_POST_ss <- FindNeighbors(PTCL_POST_ss) PTCL_POST_ss <- FindClusters(PTCL_POST_ss) PTCL_POST_ss <- RunUMAP(PTCL_POST_ss, dims = 1:30, n_neighbors = 20, min_dist = 0.3)  DimPlot(PTCL_POST_ss,reduction=\"umap\",label=T,pt.size=1,group.by=\"predicted.cell_type\")  PTCL_PRE_ss <- NormalizeData(PTCL_PRE_ss) PTCL_PRE_ss <- FindVariableFeatures(PTCL_PRE_ss) PTCL_PRE_ss <- ScaleData(PTCL_PRE_ss) PTCL_PRE_ss <- RunPCA(PTCL_PRE_ss) PTCL_PRE_ss <- FindNeighbors(PTCL_PRE_ss) PTCL_PRE_ss <- FindClusters(PTCL_PRE_ss) PTCL_PRE_ss <- RunUMAP(PTCL_PRE_ss, dims = 1:30, n_neighbors = 20, min_dist = 0.3)  DimPlot(PTCL_PRE_ss,reduction=\"umap\",label=T,pt.size=1,group.by=\"predicted.cell_type\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"subsetting-the-downsampled-atlas-into-three-t-cell-types-that-fit-the-exhaustion-trajectory","dir":"Articles","previous_headings":"Setting a threshold","what":"subsetting the downsampled atlas into three T cell types that fit the exhaustion trajectory","title":"wholeanalysis","text":"","code":"seu_ds <- readRDS(\"/scratch/ojlr1u20/TICAtlas_downsampled_1000.rds\") seu_pr <- subset(x = seu_ds, idents = c(\"Naive T cells\",\"Cytotoxic CD8 T cells\", \"Terminally exhausted CD8 T cells\")) seu_sources <- SplitObject(seu_pr, split.by = \"source\")"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"create-a-new-list-to-store-the-filtered-seurat-objects","dir":"Articles","previous_headings":"","what":"Create a new list to store the filtered Seurat objects","title":"wholeanalysis","text":"","code":"filtered_seu_sources <- list()"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"loop-over-each-seurat-object-in-the-original-list","dir":"Articles","previous_headings":"","what":"Loop over each Seurat object in the original list","title":"wholeanalysis","text":"","code":"for (i in 1:length(seu_sources)) {   # Check the number of cells in the Seurat object   num_cells <- dim(seu_sources[[i]]@assays$RNA@counts)[2]    # If the number of cells is less than 100, skip this Seurat object   if (num_cells < 100) {     next   }   # Otherwise, add the Seurat object to the filtered list   filtered_seu_sources[[length(filtered_seu_sources)+1]] <- seu_sources[[i]] }  for (i in 1:length(filtered_seu_sources)) {   filtered_seu_sources[[i]] = NormalizeData(filtered_seu_sources[[i]], normalization.method = \"LogNormalize\",                                             scale.factor = 10000, verbose = FALSE)   filtered_seu_sources[[i]] = FindVariableFeatures(filtered_seu_sources[[i]], selection.method = \"vst\",                                                     nfeatures = 1500, verbose = FALSE) }"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"all-are-default-settings-except-anchor-features","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"All are default settings except anchor.features","title":"wholeanalysis","text":"","code":"seuAnch = FindIntegrationAnchors(filtered_seu_sources, anchor.features = 1500,                                   normalization.method = \"LogNormalize\",                                   reduction = \"cca\", dims = 1:30,                                  k.anchor = 5, k.filter = 200,                                  k.score = 30, max.features = 200)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"here-we-integrate-all-genes-common-between-snrna-and-scrna","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"Here, we integrate all genes common between snRNA and scRNA","title":"wholeanalysis","text":"","code":"seu = IntegrateData(anchorset = seuAnch, dims = 1:30,                     normalization.method = \"LogNormalize\")  DefaultAssay(seu) = \"integrated\" seu <- ScaleData(seu, verbose = FALSE) seu <- FindVariableFeatures(seu) seu <- RunPCA(seu, npcs = 30, verbose = FALSE) seu <- RunUMAP(seu, reduction = \"pca\", dims = 1:30) seu <- FindNeighbors(seu, reduction = \"pca\", dims = 1:30) seu <- FindClusters(seu, resolution = 0.5)  p1 <- DimPlot(seu, reduction = \"umap\", group.by = \"cell_type\") p2 <- DimPlot(seu, reduction = \"umap\", label = TRUE, repel = TRUE) p1 + p2"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"switch-to-sce","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list > Here, we integrate all genes common between snRNA and scRNA","what":"switch to SCE","title":"wholeanalysis","text":"#UMAP ## run slingshot","code":"sce <- as.SingleCellExperiment(seu) sce <- slingshot(sce, clusterLabels = \"cell_type\", reducedDim = 'UMAP')"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"check-it-looks-ok","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"check it looks ok","title":"wholeanalysis","text":"","code":"summary(sce$slingPseudotime_1)"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"mtn---not-sure-if-we-need-grdevices","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list > plot","what":"MTN - not sure if we need grDevices","title":"wholeanalysis","text":"","code":"library(grDevices) colors <- colorRampPalette(brewer.pal(11,'Spectral')[-6])(100) plotcol <- colors[cut(sce$slingPseudotime_1, breaks=100)] plot(reducedDims(sce)$UMAP, col = plotcol, pch=16, asp = 1) lines(SlingshotDataSet(sce), lwd=2, col='black')"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"create-gs-object","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"create GS object","title":"wholeanalysis","text":"","code":"counts <- exp(logcounts(sce)) - 1 assay(sce, \"counts\") <- counts  sce_gs <- SingleCellExperiment(assays = List(expdata = logcounts(sce))) colData(sce_gs)$Pseudotime <- -sce$slingPseudotime_1 reducedDims(sce_gs) <- SimpleList(UMAP = reducedDim(sce, \"UMAP\", withDimnames=TRUE))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"binarize","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"Binarize","title":"wholeanalysis","text":"","code":"bn_cutoff <- 1.5 sce_gs <- binarize_exp(sce_gs, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff) sce_gs <- find_switch_logistic_fastglm(sce_gs, downsample = TRUE, show_warning = FALSE)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"filter-top-15-best-fitting-switching-genes-among-all-the-genes","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"filter top 15 best fitting switching genes among all the genes","title":"wholeanalysis","text":"","code":"sg_allgenes_umap <- filter_switchgenes(sce_gs, allgenes = TRUE, topnum = 100)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"plot-1","dir":"Articles","previous_headings":"Loop over each Seurat object in the original list","what":"plot","title":"wholeanalysis","text":"","code":"plot_timeline_ggplot(sg_allgenes_umap, timedata = sce_gs$Pseudotime, txtsize = 3)"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"select_evenly_distributed_switching_genes","dir":"Articles","previous_headings":"","what":"select_evenly_distributed_switching_genes","title":"wholeanalysis","text":"","code":"select_evenly_distributed_switching_genes <- function(sg_allgenes, min_time_spacing){      ## Sort sg_allgenes by pseudoR2s    sg_allgenes <- sg_allgenes[order(-sg_allgenes$pseudoR2s),]      # Initialize the time value of the previously selected gene for both \"up\"'s and \"down\"'s   ups <- sg_allgenes[sg_allgenes$direction == \"up\", ]   prev_ups_times <- ups$switch_at_timeidx[1]   downs <- sg_allgenes[sg_allgenes$direction == \"down\", ]   prev_downs_times <- downs$switch_at_timeidx[1]      # Initialize the subsetted matrix with the first \"up\" and \"down\" gene   subsetted_matrix <- downs[1, ]   subsetted_matrix <- rbind(subsetted_matrix, ups[1, ])      # Loop over the remaining \"up\" genes and add them to the subsetted matrix if they meet the criteria   for (i in 2:nrow(ups)) {     # Check if the time value of the current gene is spaced by at least min_time_spacing from all previously selected genes     if (all(abs(ups$switch_at_timeidx[i] - prev_ups_times) >= min_time_spacing)) {       # Add the current gene to the subsetted matrix       subsetted_matrix <- rbind(subsetted_matrix, ups[i, ])       # Update the previous time values       prev_ups_times <- c(prev_ups_times, ups$switch_at_timeidx[i])     }   }      # Loop over the remaining \"down\" genes and add them to the subsetted matrix if they meet the criteria   for (i in 2:nrow(downs)) {     # Check if the time value of the current gene is spaced by at least min_time_spacing from all previously selected genes     if (all(abs(downs$switch_at_timeidx[i] - prev_downs_times) >= min_time_spacing)) {       # Add the current gene to the subsetted matrix       subsetted_matrix <- rbind(subsetted_matrix, downs[i, ])       # Update the previous time values       prev_downs_times <- c(prev_downs_times, downs$switch_at_timeidx[i])     }   }      # return the subsetted matrix   gs_scorer_genes <- subsetted_matrix   return(gs_scorer_genes) }"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"binary_counts_matrix-is-from-the-patient-data-and-gs_scorer_genes-is-from-atlas-data","dir":"Articles","previous_headings":"","what":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","title":"wholeanalysis","text":"","code":"filter_gene_expression_for_switching_genes<-function(binary_counts_matrix, gs_scorer_genes) {   indices_of_switching_genes<-which(rownames(binary_counts_matrix) %in% gs_scorer_genes[,1])   reduced_binary_counts_matrix<- binary_counts_matrix[indices_of_switching_genes,]   gs_scorer_genes_to_keep<-which(gs_scorer_genes[,1] %in% rownames(reduced_binary_counts_matrix))   gs_scorer_genes<- gs_scorer_genes[gs_scorer_genes_to_keep,]   #print(gs_scorer_genes_to_keep)   returnlist<-list(reduced_binary_counts_matrix, gs_scorer_genes)   return(returnlist) }"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"old","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"Old?","title":"wholeanalysis","text":"","code":"#filtered_return<-filter_gene_expression_for_switching_genes(binary_counts_matrix, gs_scorer_genes) #reduced_binary_counts_matrix<-filtered_return[[1]] #gs_scorer_genes<-filtered_return[[2]]"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"todo-make-this-comment-more-verbose-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data > Identify the “racing lines”","what":"TODO make this ^^ comment more verbose.","title":"wholeanalysis","text":"","code":"create_racing_lines<-function(reduced_binary_counts_matrix,gs_scorer_genes) {   all_patients_cells_scored<-list()   number_of_cells<-dim(reduced_binary_counts_matrix)[2]   number_of_switching_genes<-dim(gs_scorer_genes)[1]   #for each patient cell C    for (c in 1:number_of_cells){     print(paste(c,\"out of\", number_of_cells, \"cells\"))     racing_mat<-matrix(0,nrow = number_of_switching_genes, ncol = 100)          #for each switching gene G     for (g in 1:number_of_switching_genes){       print(paste(g,\"out of\", number_of_switching_genes, \"switching genes\"))       #find out the switch time Gt, and direction Gd       switching_time <- as.numeric(gs_scorer_genes[g,12])       switching_direction <- gs_scorer_genes[g,10]       #find out if its expressed Ct       is_expressed <- reduced_binary_counts_matrix[g,c]       #If Ct = TRUE       if(is_expressed == 1){         #If Gd = UP         if(switching_direction == \"up\"){           # [Gt:100] = 1           racing_mat[g,switching_time:100]<-1         }else{           #If Gd = DOWN           # [0:Gt] = 1           racing_mat[g,0:switching_time]<-1         }         #If Ct = FALSE           }else{         if(switching_direction == \"up\"){           #If Gd = UP           #[0:Gt] = 1           racing_mat[g,0:switching_time]<-1         }else{           #If Gd = DOWN           # [Gt:100] = 1           racing_mat[g,switching_time:100]<-1         }       }     }     all_patients_cells_scored[[c]]<-racing_mat   }   return(all_patients_cells_scored) }"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"does-this-need-to-be-included-in-a-function","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"Does this need to be included in a function?","title":"wholeanalysis","text":"","code":"#list_of_cell_position_frequencies <- create_racing_lines(reduced_binary_counts_matrix, gs_scorer_genes)"},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"todo-make-the-high-points-into-single-points-in-order-to-makae-the-yaxis-of-the-final-plot-more-intuitive-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data > Combining all cells racing lines after binerization (Owen’s way)","what":"TODO make the high-points into single points in order to makae the yaxis of the final plot more intuitive.","title":"wholeanalysis","text":"","code":"flatten_cell_frequencies_owen <- function(list_of_cell_position_frequencies) {   all_patient_cells_scored_flat <- list()   length_of_list <- length(list_of_cell_position_frequencies)   for(i in 1:length_of_list){     location_of_highpoint <- as.numeric(colSums(list_of_cell_position_frequencies[[i]]) == max(colSums(list_of_cell_position_frequencies[[i]])))     all_patient_cells_scored_flat[[i]] <- location_of_highpoint   }   flat_matrix <- do.call(rbind, all_patient_cells_scored_flat)   return(flat_matrix) }"},{"path":[]},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"this-is-an-inelegant-solution-as-it-chooses-the-first-column-index-of-the-highpoint-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data > Combining all cells racing lines after binerization (Owen’s way)","what":"this is an inelegant solution as it chooses the FIRST column index of the highpoint.","title":"wholeanalysis","text":"","code":"flatten_cell_frequencies_owen_done <- function(list_of_cell_position_frequencies) {   all_patient_cells_scored_flat <- list()   length_of_list <- length(list_of_cell_position_frequencies)   for(i in 1:length_of_list){     location_of_highpoint <- as.numeric(colSums(list_of_cell_position_frequencies[[i]]) == max(colSums(list_of_cell_position_frequencies[[i]])))     indices <- which(location_of_highpoint == 1)[-1]     location_of_highpoint[indices] <- 0     all_patient_cells_scored_flat[[i]] <- location_of_highpoint   }   flat_matrix <- do.call(rbind, all_patient_cells_scored_flat)   return(flat_matrix) }"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"combining-all-cells-racing-lines-without-binerization-mois-way-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"Combining all cells racing lines without binerization (Moi’s way).","title":"wholeanalysis","text":"","code":"flatten_cell_frequencies_moi <- function(list_of_cell_position_frequencies) {   #making an empty flat matrix   all_patient_cells_scored_flat <- matrix(0, nrow = 1, ncol = 100)   #   length_of_list <- length(list_of_cell_position_frequencies)   # for every cells matrix calculate the colsums and add them to the flat matrix   for (i in 1:length_of_list) {     all_patient_cells_scored_flat <- all_patient_cells_scored_flat + colSums(list_of_cell_position_frequencies[[i]])   }   # divide the values in the flat matrix by the number of cells in an attempt to make the yaxis more informative.   # This may be the wrong approach but it shouldnt change the shape of the final plot   all_patient_cells_scored_flat <- all_patient_cells_scored_flat/length_of_list      return(all_patient_cells_scored_flat) }"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"select_evenly_distributed_switching_genes-1","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"select_evenly_distributed_switching_genes","title":"wholeanalysis","text":"","code":"gs_scorer_genes <- select_evenly_distributed_switching_genes(sg_allgenes_umap, min_time_spacing = 5)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"plot-2","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"plot","title":"wholeanalysis","text":"","code":"plot_timeline_ggplot(gs_scorer_genes, timedata = sce_gs$Pseudotime, txtsize = 3)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"subsetting-the-pre-treatment-patient-data-to-only-include-the-exhaustion-trajectory-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"subsetting the pre-treatment patient data to only include the exhaustion trajectory.","title":"wholeanalysis","text":"","code":"pre_T.seu <- subset(x = PTCL_PRE_ss, subset = predicted.cell_type %in% c(\"Naive T cells\",\"Cytotoxic CD8 T cells\", \"Terminally exhausted CD8 T cells\"))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"subsetting-the-post-treatment-patient-data-to-only-include-the-exhaustion-trajectory-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"subsetting the post treatment patient data to only include the exhaustion trajectory.","title":"wholeanalysis","text":"","code":"post_T.seu <- subset(x = PTCL_POST_ss, subset = predicted.cell_type %in% c(\"Naive T cells\",\"Cytotoxic CD8 T cells\", \"Terminally exhausted CD8 T cells\"))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"converting-the-pre-treatment-patient-data-to-sce-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"converting the pre-treatment patient data to SCE.","title":"wholeanalysis","text":"","code":"pre.sce <- as.SingleCellExperiment(pre_T.seu)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"converting-the-pre-treatment-patient-data-to-sce--1","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"converting the pre-treatment patient data to SCE.","title":"wholeanalysis","text":"","code":"post.sce <- as.SingleCellExperiment(post_T.seu)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"convert-the-pre-treatment-patient-data-to-a-gs-obj-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"convert the pre treatment patient data to a GS obj.","title":"wholeanalysis","text":"","code":"gs_pre <- SingleCellExperiment(assays = List(expdata = logcounts(pre.sce)))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"convert-the-post-treatment-patient-data-to-a-gs-obj-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"convert the post treatment patient data to a GS obj.","title":"wholeanalysis","text":"","code":"gs_post <- SingleCellExperiment(assays = List(expdata = logcounts(post.sce)))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"todo-check-if-this-cutoff-is-suitable-for-the-patient-data-","dir":"Articles","previous_headings":"binary_counts_matrix is from the Patient DATA and gs_scorer_genes is from Atlas Data","what":"TODO check if this cutoff is suitable for the patient data.","title":"wholeanalysis","text":"#create reduced binary expression matrix switching genes, binary counts patient gs scorer atlas","code":"bn_cutoff <- 0.2 # binarize pre treatment patient data gs_pre<- binarize_exp(gs_pre, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff) # binarize post treatment patient data gs_post<- binarize_exp(gs_post, fix_cutoff = TRUE, binarize_cutoff = bn_cutoff)  binary_counts_matrix_pre<-assays(gs_pre)$binary filtered_return_pre<-filter_gene_expression_for_switching_genes(binary_counts_matrix_pre, gs_scorer_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"mtn---im-not-sure-what-this-does","dir":"Articles","previous_headings":"","what":"MTN - I’m not sure what this does","title":"wholeanalysis","text":"","code":"reduced_binary_counts_matrix_pre<-filtered_return_pre[[1]]"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"mtn---or-this-","dir":"Articles","previous_headings":"","what":"MTN - or this.","title":"wholeanalysis","text":"#Create list_of_cell_position_frequencies using valid indices","code":"gs_scorer_genes<-filtered_return_pre[[2]] list_of_cell_position_frequencies <- create_racing_lines(reduced_binary_counts_matrix_pre, gs_scorer_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"combining-all-cells-racing-lines-after-binerization-owens-way-2","dir":"Articles","previous_headings":"","what":"Combining all cells racing lines after binerization (Owen’s way)","title":"wholeanalysis","text":"#create reduced binary expression matrix switching genes, binary counts patient gs scorer atlas","code":"preflat <- flatten_cell_frequencies_moi(list_of_cell_position_frequencies) plot(colSums(preflat))  binary_counts_matrix_post<-assays(gs_post)$binary filtered_return_post<-filter_gene_expression_for_switching_genes(binary_counts_matrix_post, gs_scorer_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"mtn---im-not-sure-what-this-does-1","dir":"Articles","previous_headings":"","what":"MTN - I’m not sure what this does","title":"wholeanalysis","text":"","code":"reduced_binary_counts_matrix_post<-filtered_return_post[[1]]"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"mtn---or-this--1","dir":"Articles","previous_headings":"","what":"MTN - or this.","title":"wholeanalysis","text":"#Create list_of_cell_position_frequencies using valid indices","code":"gs_scorer_genes<-filtered_return_post[[2]] list_of_cell_position_frequencies <- create_racing_lines(reduced_binary_counts_matrix_post, gs_scorer_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"combining-all-cells-racing-lines-after-binerization-and-plot","dir":"Articles","previous_headings":"","what":"Combining all cells racing lines after binerization and plot","title":"wholeanalysis","text":"","code":"postflat <- flatten_cell_frequencies_moi(list_of_cell_position_frequencies) plot(colSums(postflat))"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/articles/wholeanalysis.html","id":"view-the-differnece-between-patients","dir":"Articles","previous_headings":"Combining all cells racing lines after binerization and plot","what":"view the differnece between patients","title":"wholeanalysis","text":"","code":"patient_diff = colSums(postflat) - colSums(preflat) plot(patient_diff)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Moi Taiga Nicholas. Author, maintainer.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taiga Nicholas M (2023). GeneSwitchesScorer: Identifies Progression Sample Trajectory. https://github.com/moi-taiga/GeneSwitchesScorer, https://moi-taiga.github.io/GeneSwitchesScorer/.","code":"@Manual{,   title = {GeneSwitchesScorer: Identifies Progression of a Sample on a Trajectory},   author = {Moi {Taiga Nicholas}},   year = {2023},   note = {https://github.com/moi-taiga/GeneSwitchesScorer, https://moi-taiga.github.io/GeneSwitchesScorer/}, }"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/index.html","id":"geneswitchesscorer","dir":"","previous_headings":"","what":"Identifies Progression of a Sample on a Trajectory","title":"Identifies Progression of a Sample on a Trajectory","text":"goal GeneSwitchesScorer identify position sample upon trajectory.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Identifies Progression of a Sample on a Trajectory","text":"can install development version GeneSwitchesScorer GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"moi-taiga/GeneSwitchesScorer\")"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Identifies Progression of a Sample on a Trajectory","text":"GSS Workflow","code":""},{"path":[]},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/index.html","id":"assumptions","dir":"","previous_headings":"","what":"Assumptions:","title":"Identifies Progression of a Sample on a Trajectory","text":"Sample found upon chosen trajectory. Sample distinct part trajectory. sample cells evenly distributed across trajectory predicted location centre trajectory.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/create_racing_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the ","title":"Identify the ","text":"Produces estimate position trajectory gene cell sample. can later aggregated estimate position sample along trajectory.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/create_racing_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the ","text":"","code":"create_racing_lines(reduced_binary_counts_matrix, gss_genes)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/create_racing_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the ","text":"reduced_binary_counts_matrix matrix samples binary gene expression. gss_genes Switching genes evenly distributed pseudotime.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/create_racing_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the ","text":"list matrices: matrix cell columns represent progress trajectory, rows represent genes, values indicate likely position cell upon trajectory based genes bianrized expression.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/filter_gene_expression_for_switching_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Gene Expression for Switching Genes — filter_gene_expression_for_switching_genes","title":"Filter Gene Expression for Switching Genes — filter_gene_expression_for_switching_genes","text":"Create reduced binary expression matrix selected switching genes, binary_counts_matrix sample DATA gs_scorer_genes Atlas Data.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/filter_gene_expression_for_switching_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Gene Expression for Switching Genes — filter_gene_expression_for_switching_genes","text":"","code":"filter_gene_expression_for_switching_genes(   binary_counts_matrix,   gs_scorer_genes )"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/filter_gene_expression_for_switching_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Gene Expression for Switching Genes — filter_gene_expression_for_switching_genes","text":"binary_counts_matrix binary expression matrix sample. gs_scorer_genes Switching genes evenly distributed pseudotime..","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/filter_gene_expression_for_switching_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Gene Expression for Switching Genes — filter_gene_expression_for_switching_genes","text":"reduced binary expression matrix filtered include selected switching genes","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_moi.html","id":null,"dir":"Reference","previous_headings":"","what":"Title flatten_cell_frequencies_moi — flatten_cell_frequencies_moi","title":"Title flatten_cell_frequencies_moi — flatten_cell_frequencies_moi","text":"Combining cells racing lines binerization (Moi's way).","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_moi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title flatten_cell_frequencies_moi — flatten_cell_frequencies_moi","text":"","code":"flatten_cell_frequencies_moi(list_of_cell_position_frequencies)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_moi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title flatten_cell_frequencies_moi — flatten_cell_frequencies_moi","text":"list_of_cell_position_frequencies list_of_cell_position_frequencies produced racing line builder.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_moi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title flatten_cell_frequencies_moi — flatten_cell_frequencies_moi","text":"flat matrix column represents position along trajectory, value proportional number sample's cells position.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_owen.html","id":null,"dir":"Reference","previous_headings":"","what":"Title flatten_cell_frequencies_owen — flatten_cell_frequencies_owen","title":"Title flatten_cell_frequencies_owen — flatten_cell_frequencies_owen","text":"Title flatten_cell_frequencies_owen","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_owen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title flatten_cell_frequencies_owen — flatten_cell_frequencies_owen","text":"","code":"flatten_cell_frequencies_owen(list_of_cell_position_frequencies)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_owen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title flatten_cell_frequencies_owen — flatten_cell_frequencies_owen","text":"list_of_cell_position_frequencies list_of_cell_position_frequencies produced racing line builder.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_owen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title flatten_cell_frequencies_owen — flatten_cell_frequencies_owen","text":"flat matrix column represents position along trajectory, value proportional number sample's cells position.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/flatten_cell_frequencies_owen.html","id":"combining-all-cells-racing-lines-after-binerization-owen-s-way-","dir":"Reference","previous_headings":"","what":"Combining all cells racing lines after binerization (Owen's way)","title":"Title flatten_cell_frequencies_owen — flatten_cell_frequencies_owen","text":"","code":"TODO make the high-points into single points in order to makae the yaxis of the final plot more intuitive."},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/gss_output_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — gss_output_plot","title":"Title — gss_output_plot","text":"Title","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/gss_output_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — gss_output_plot","text":"","code":"gss_output_plot(fibroblast_flat)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/gss_output_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — gss_output_plot","text":"fibroblast_flat flattend sample data","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/gss_output_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — gss_output_plot","text":"nice plot highlighting probable position sample trajectory","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/label_transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Label Transfer\nTo make sure that your labels in your patient data match that used in the atlas. — label_transfer","title":"Label Transfer\nTo make sure that your labels in your patient data match that used in the atlas. — label_transfer","text":"Label Transfer make sure labels patient data match used atlas.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/label_transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label Transfer\nTo make sure that your labels in your patient data match that used in the atlas. — label_transfer","text":"","code":"label_transfer(query, reference)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/label_transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label Transfer\nTo make sure that your labels in your patient data match that used in the atlas. — label_transfer","text":"query Query object. e.g. patient data reference reference Seurat object. e.g atlas data","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/label_transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label Transfer\nTo make sure that your labels in your patient data match that used in the atlas. — label_transfer","text":"Query object new predicted cell types.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/print.GSS_OBJECT.html","id":null,"dir":"Reference","previous_headings":"","what":"Print GSS Object. — print.GSS_OBJECT","title":"Print GSS Object. — print.GSS_OBJECT","text":"Make calling GSS_OBJECT nicer:","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/print.GSS_OBJECT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print GSS Object. — print.GSS_OBJECT","text":"","code":"# S3 method for GSS_OBJECT print(x)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/print.GSS_OBJECT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print GSS Object. — print.GSS_OBJECT","text":"x","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/print.GSS_OBJECT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print GSS Object. — print.GSS_OBJECT","text":"titles (TODO: basic info) contents GSS_OBJECT","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/racinglines_timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and Visualise each cells position. — racinglines_timeline","title":"Identify and Visualise each cells position. — racinglines_timeline","text":"Produces plot cell helps visualize GSS predicting cells position.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/racinglines_timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and Visualise each cells position. — racinglines_timeline","text":"","code":"racinglines_timeline(   gss_genes,   reduced_binary_counts_matrix,   cell = 1,   full_time_IDX = TRUE )"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/racinglines_timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and Visualise each cells position. — racinglines_timeline","text":"gss_genes selection switching genes evenly distributed pseudo-time. reduced_binary_counts_matrix matrix samples binary gene expression. cell index (name?) cell interest full_time_IDX want scale go Min Max 0-100.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/racinglines_timeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and Visualise each cells position. — racinglines_timeline","text":"Timeline plot selected cell","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/re_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Re Integrate\nSplits a Seurat object into a list of Seurat objects to integrate,\nPerforms SCTransform normalization separately for each Seurat object,\nRuns the PrepSCTIntegration function on the object list,\nIntegrates datasets. — re_integrate","title":"Re Integrate\nSplits a Seurat object into a list of Seurat objects to integrate,\nPerforms SCTransform normalization separately for each Seurat object,\nRuns the PrepSCTIntegration function on the object list,\nIntegrates datasets. — re_integrate","text":"Re Integrate Splits Seurat object list Seurat objects integrate, Performs SCTransform normalization separately Seurat object, Runs PrepSCTIntegration function object list, Integrates datasets.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/re_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re Integrate\nSplits a Seurat object into a list of Seurat objects to integrate,\nPerforms SCTransform normalization separately for each Seurat object,\nRuns the PrepSCTIntegration function on the object list,\nIntegrates datasets. — re_integrate","text":"","code":"re_integrate(object, ncell_cutoff)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/re_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re Integrate\nSplits a Seurat object into a list of Seurat objects to integrate,\nPerforms SCTransform normalization separately for each Seurat object,\nRuns the PrepSCTIntegration function on the object list,\nIntegrates datasets. — re_integrate","text":"object Subsetted Seurat object want re-integrate ncell_cutoff Minimum number cells per split object","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/re_integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re Integrate\nSplits a Seurat object into a list of Seurat objects to integrate,\nPerforms SCTransform normalization separately for each Seurat object,\nRuns the PrepSCTIntegration function on the object list,\nIntegrates datasets. — re_integrate","text":"Re-integrated Seurat Object.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/score_gss_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — score_gss_accuracy","title":"Title — score_gss_accuracy","text":"Use \"sample\" cells taken reference. check close predicted position cells real positon.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/score_gss_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — score_gss_accuracy","text":"","code":"score_gss_accuracy(gss_obj)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/score_gss_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — score_gss_accuracy","text":"fib_flat flattened sample data gss_genes","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/score_gss_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — score_gss_accuracy","text":"score accurate reults .","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/select_evenly_distributed_switching_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Evenly Distributed Switching Genes — select_evenly_distributed_switching_genes","title":"Select Evenly Distributed Switching Genes — select_evenly_distributed_switching_genes","text":"Filters switching genes GenesSwitches.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/select_evenly_distributed_switching_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Evenly Distributed Switching Genes — select_evenly_distributed_switching_genes","text":"","code":"select_evenly_distributed_switching_genes(sg_allgenes, min_time_spacing)"},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/select_evenly_distributed_switching_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Evenly Distributed Switching Genes — select_evenly_distributed_switching_genes","text":"sg_allgenes Filtered Switching Genes Gene Switches. (dont use topnum instead choose Psvalue cutoff ) min_time_spacing minimum distance genes evenly distributing.","code":""},{"path":"https://moi-taiga.github.io/GeneSwitchesScorer/reference/select_evenly_distributed_switching_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Evenly Distributed Switching Genes — select_evenly_distributed_switching_genes","text":"Switching genes evenly distributed pseudotime selected density.","code":""}]
